import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, ɵmemoizeInstance, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';
import { timer, from } from 'rxjs';
import { concatMap, distinct } from 'rxjs/operators';
import * as i0 from '@angular/core';
import { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone } from '@angular/core';
import { isSupported as isSupported$1, getAnalytics as getAnalytics$1, initializeAnalytics as initializeAnalytics$1, logEvent as logEvent$1, setAnalyticsCollectionEnabled as setAnalyticsCollectionEnabled$1, setCurrentScreen as setCurrentScreen$1, settings as settings$1, setUserId as setUserId$1, setUserProperties as setUserProperties$1 } from 'firebase/analytics';
export * from 'firebase/analytics';
import { FirebaseApp, FirebaseApps } from '@angular/fire/app';
import { registerVersion } from 'firebase/app';

class Analytics {
    constructor(analytics) {
        return analytics;
    }
}
const ANALYTICS_PROVIDER_NAME = 'analytics';
class AnalyticsInstances {
    constructor() {
        return ɵgetAllInstancesOf(ANALYTICS_PROVIDER_NAME);
    }
}
const analyticInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(ANALYTICS_PROVIDER_NAME))), distinct());

const PROVIDED_ANALYTICS_INSTANCES = new InjectionToken('angularfire2.analytics-instances');
const IS_SUPPORTED = new InjectionToken('angularfire2.analytics.isSupported');
const isSupportedSymbol = Symbol('angularfire2.analytics.isSupported');
function defaultAnalyticsInstanceFactory(isSupported, provided, defaultApp) {
    const defaultAnalytics = isSupported ?
        ɵgetDefaultInstanceOf(ANALYTICS_PROVIDER_NAME, provided, defaultApp) :
        undefined;
    return new Analytics(defaultAnalytics);
}
function analyticsInstanceFactory(fn) {
    return (zone, isSupported) => {
        const analytics = isSupported ? ɵmemoizeInstance(fn, zone) : undefined;
        return new Analytics(analytics);
    };
}
const ANALYTICS_INSTANCES_PROVIDER = {
    provide: AnalyticsInstances,
    deps: [
        [new Optional(), PROVIDED_ANALYTICS_INSTANCES],
    ]
};
const DEFAULT_ANALYTICS_INSTANCE_PROVIDER = {
    provide: Analytics,
    useFactory: defaultAnalyticsInstanceFactory,
    deps: [
        IS_SUPPORTED,
        [new Optional(), PROVIDED_ANALYTICS_INSTANCES],
        FirebaseApp,
    ]
};
class AnalyticsModule {
    constructor() {
        registerVersion('angularfire', VERSION.full, 'analytics');
    }
}
AnalyticsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AnalyticsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AnalyticsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AnalyticsModule });
AnalyticsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AnalyticsModule, providers: [
        DEFAULT_ANALYTICS_INSTANCE_PROVIDER,
        ANALYTICS_INSTANCES_PROVIDER,
        {
            provide: APP_INITIALIZER,
            useValue: () => isSupported$1().then(it => globalThis[isSupportedSymbol] = it),
            multi: true,
        },
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AnalyticsModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        DEFAULT_ANALYTICS_INSTANCE_PROVIDER,
                        ANALYTICS_INSTANCES_PROVIDER,
                        {
                            provide: APP_INITIALIZER,
                            useValue: () => isSupported$1().then(it => globalThis[isSupportedSymbol] = it),
                            multi: true,
                        },
                    ]
                }]
        }], ctorParameters: function () { return []; } });
function provideAnalytics(fn) {
    return {
        ngModule: AnalyticsModule,
        providers: [{
                provide: IS_SUPPORTED,
                useFactory: () => globalThis[isSupportedSymbol],
            }, {
                provide: PROVIDED_ANALYTICS_INSTANCES,
                useFactory: analyticsInstanceFactory(fn),
                multi: true,
                deps: [
                    NgZone,
                    IS_SUPPORTED,
                    ɵAngularFireSchedulers,
                    FirebaseApps,
                ]
            }]
    };
}

// DO NOT MODIFY, this file is autogenerated by tools/build.ts
const getAnalytics = ɵzoneWrap(getAnalytics$1, true);
const initializeAnalytics = ɵzoneWrap(initializeAnalytics$1, true);
const isSupported = ɵzoneWrap(isSupported$1, true);
const logEvent = ɵzoneWrap(logEvent$1, true);
const setAnalyticsCollectionEnabled = ɵzoneWrap(setAnalyticsCollectionEnabled$1, true);
const setCurrentScreen = ɵzoneWrap(setCurrentScreen$1, true);
const settings = ɵzoneWrap(settings$1, true);
const setUserId = ɵzoneWrap(setUserId$1, true);
const setUserProperties = ɵzoneWrap(setUserProperties$1, true);

/**
 * Generated bundle index. Do not edit.
 */

export { Analytics, AnalyticsInstances, AnalyticsModule, analyticInstance$, getAnalytics, initializeAnalytics, isSupported, logEvent, provideAnalytics, setAnalyticsCollectionEnabled, setCurrentScreen, setUserId, setUserProperties, settings };
//# sourceMappingURL=angular-fire-analytics.js.map
