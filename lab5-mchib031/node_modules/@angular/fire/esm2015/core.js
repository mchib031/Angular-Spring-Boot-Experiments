import { isDevMode, Version } from '@angular/core';
import { getApps } from 'firebase/app';
export const VERSION = new Version('7.0.4');
const IS_HMR = !!module.hot;
const log = (level, ...args) => {
    if (isDevMode() && typeof console !== 'undefined') {
        console[level](...args);
    }
};
export function ɵcacheInstance(cacheKey, moduleName, appName, fn, deps) {
    const [, instance, cachedDeps] = globalThis.ɵAngularfireInstanceCache.find((it) => it[0] === cacheKey) || [];
    if (instance) {
        if (!matchDep(deps, cachedDeps)) {
            log('error', `${moduleName} was already initialized on the ${appName} Firebase App with different settings.${IS_HMR ? ' You may need to reload as Firebase is not HMR aware.' : ''}`);
            log('warn', { is: deps, was: cachedDeps });
        }
        return instance;
    }
    else {
        const newInstance = fn();
        globalThis.ɵAngularfireInstanceCache.push([cacheKey, newInstance, deps]);
        return newInstance;
    }
}
globalThis.ɵAngularfireInstanceCache || (globalThis.ɵAngularfireInstanceCache = []);
export function ɵmemoizeInstance(fn, zone) {
    const [, instance] = globalThis.ɵAngularfireInstanceCache.find((it) => matchDep(it[0], fn)) || [];
    if (instance) {
        return instance;
    }
    else {
        // TODO catch and add HMR warning
        const instance = zone.runOutsideAngular(() => fn());
        globalThis.ɵAngularfireInstanceCache.push([fn, instance]);
        return instance;
    }
}
function matchDep(a, b) {
    try {
        return a.toString() === b.toString();
    }
    catch (_) {
        return a === b;
    }
}
export function ɵgetDefaultInstanceOf(identifier, provided, defaultApp) {
    if (provided) {
        // Was provide* only called once? If so grab that
        if (provided.length === 1) {
            return provided[0];
        }
        const providedUsingDefaultApp = provided.filter((it) => it.app === defaultApp);
        // Was provide* only called once, using the default app? If so use that
        if (providedUsingDefaultApp.length === 1) {
            return providedUsingDefaultApp[0];
        }
    }
    // Grab the default instance from the defaultApp
    const defaultAppWithContainer = defaultApp;
    const provider = defaultAppWithContainer.container.getProvider(identifier);
    return provider.getImmediate();
}
export const ɵgetAllInstancesOf = (identifier, app) => {
    const apps = app ? [app] : getApps();
    const instances = [];
    apps.forEach((app) => {
        const provider = app.container.getProvider(identifier);
        provider.instances.forEach((instance) => {
            if (!instances.includes(instance)) {
                instances.push(instance);
            }
        });
    });
    return instances;
};
//# sourceMappingURL=data:application/json;base64,