import { NgModule, Optional, NgZone, InjectionToken, APP_INITIALIZER } from '@angular/core';
import { isSupported } from 'firebase/messaging';
import { ɵgetDefaultInstanceOf, ɵmemoizeInstance, ɵAngularFireSchedulers, VERSION } from '@angular/fire';
import { Messaging, MessagingInstances, MESSAGING_PROVIDER_NAME } from './messaging';
import { FirebaseApps, FirebaseApp } from '@angular/fire/app';
import { registerVersion } from 'firebase/app';
import * as i0 from "@angular/core";
const PROVIDED_MESSAGING_INSTANCES = new InjectionToken('angularfire2.messaging-instances');
const IS_SUPPORTED = new InjectionToken('angularfire2.messaging.isSupported');
const isSupportedSymbol = Symbol('angularfire2.messaging.isSupported');
export function defaultMessagingInstanceFactory(isSupported, provided, defaultApp) {
    const defaultAuth = isSupported ?
        ɵgetDefaultInstanceOf(MESSAGING_PROVIDER_NAME, provided, defaultApp) :
        undefined;
    return new Messaging(defaultAuth);
}
export function messagingInstanceFactory(fn) {
    return (zone, isSupported) => {
        const messaging = isSupported ? ɵmemoizeInstance(fn, zone) : undefined;
        return new Messaging(messaging);
    };
}
const MESSAGING_INSTANCES_PROVIDER = {
    provide: MessagingInstances,
    deps: [
        [new Optional(), PROVIDED_MESSAGING_INSTANCES],
    ]
};
const DEFAULT_MESSAGING_INSTANCE_PROVIDER = {
    provide: Messaging,
    useFactory: defaultMessagingInstanceFactory,
    deps: [
        IS_SUPPORTED,
        [new Optional(), PROVIDED_MESSAGING_INSTANCES],
        FirebaseApp,
    ]
};
export class MessagingModule {
    constructor() {
        registerVersion('angularfire', VERSION.full, 'fcm');
    }
}
MessagingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MessagingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MessagingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MessagingModule });
MessagingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MessagingModule, providers: [
        DEFAULT_MESSAGING_INSTANCE_PROVIDER,
        MESSAGING_INSTANCES_PROVIDER,
        {
            provide: APP_INITIALIZER,
            useValue: () => isSupported().then(it => globalThis[isSupportedSymbol] = it),
            multi: true,
        },
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MessagingModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        DEFAULT_MESSAGING_INSTANCE_PROVIDER,
                        MESSAGING_INSTANCES_PROVIDER,
                        {
                            provide: APP_INITIALIZER,
                            useValue: () => isSupported().then(it => globalThis[isSupportedSymbol] = it),
                            multi: true,
                        },
                    ]
                }]
        }], ctorParameters: function () { return []; } });
export function provideMessaging(fn) {
    return {
        ngModule: MessagingModule,
        providers: [{
                provide: IS_SUPPORTED,
                useFactory: () => globalThis[isSupportedSymbol],
            }, {
                provide: PROVIDED_MESSAGING_INSTANCES,
                useFactory: messagingInstanceFactory(fn),
                multi: true,
                deps: [
                    NgZone,
                    IS_SUPPORTED,
                    ɵAngularFireSchedulers,
                    FirebaseApps,
                ],
            }]
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnaW5nLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdpbmcvbWVzc2FnaW5nLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUF1QixlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakgsT0FBTyxFQUFFLFdBQVcsRUFBa0MsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsZ0JBQWdCLEVBQUUsc0JBQXNCLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDckYsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQUUvQyxNQUFNLDRCQUE0QixHQUFHLElBQUksY0FBYyxDQUFjLGtDQUFrQyxDQUFDLENBQUM7QUFDekcsTUFBTSxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQVUsb0NBQW9DLENBQUMsQ0FBQztBQUV2RixNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0FBRXZFLE1BQU0sVUFBVSwrQkFBK0IsQ0FBQyxXQUFvQixFQUFFLFFBQXVDLEVBQUUsVUFBdUI7SUFDcEksTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLENBQUM7UUFDL0IscUJBQXFCLENBQW9CLHVCQUF1QixFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3pGLFNBQVMsQ0FBQztJQUNaLE9BQU8sSUFBSSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxFQUEyQjtJQUNsRSxPQUFPLENBQUMsSUFBWSxFQUFFLFdBQW9CLEVBQUUsRUFBRTtRQUM1QyxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFvQixFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUMxRixPQUFPLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLDRCQUE0QixHQUFHO0lBQ25DLE9BQU8sRUFBRSxrQkFBa0I7SUFDM0IsSUFBSSxFQUFFO1FBQ0osQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLDRCQUE0QixDQUFFO0tBQ2hEO0NBQ0YsQ0FBQztBQUVGLE1BQU0sbUNBQW1DLEdBQUc7SUFDMUMsT0FBTyxFQUFFLFNBQVM7SUFDbEIsVUFBVSxFQUFFLCtCQUErQjtJQUMzQyxJQUFJLEVBQUU7UUFDSixZQUFZO1FBQ1osQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLDRCQUE0QixDQUFFO1FBQy9DLFdBQVc7S0FDWjtDQUNGLENBQUM7QUFhRixNQUFNLE9BQU8sZUFBZTtJQUMxQjtRQUNFLGVBQWUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDOzs0R0FIVSxlQUFlOzZHQUFmLGVBQWU7NkdBQWYsZUFBZSxhQVZmO1FBQ1QsbUNBQW1DO1FBQ25DLDRCQUE0QjtRQUM1QjtZQUNFLE9BQU8sRUFBRSxlQUFlO1lBQ3hCLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDNUUsS0FBSyxFQUFFLElBQUk7U0FDWjtLQUNGOzJGQUVVLGVBQWU7a0JBWDNCLFFBQVE7bUJBQUM7b0JBQ1IsU0FBUyxFQUFFO3dCQUNULG1DQUFtQzt3QkFDbkMsNEJBQTRCO3dCQUM1Qjs0QkFDRSxPQUFPLEVBQUUsZUFBZTs0QkFDeEIsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQzs0QkFDNUUsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7aUJBQ0Y7O0FBT0QsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEVBQTJCO0lBQzFELE9BQU87UUFDTCxRQUFRLEVBQUUsZUFBZTtRQUN6QixTQUFTLEVBQUUsQ0FBQztnQkFDVixPQUFPLEVBQUUsWUFBWTtnQkFDckIsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQzthQUNoRCxFQUFFO2dCQUNELE9BQU8sRUFBRSw0QkFBNEI7Z0JBQ3JDLFVBQVUsRUFBRSx3QkFBd0IsQ0FBQyxFQUFFLENBQUM7Z0JBQ3hDLEtBQUssRUFBRSxJQUFJO2dCQUNYLElBQUksRUFBRTtvQkFDSixNQUFNO29CQUNOLFlBQVk7b0JBQ1osc0JBQXNCO29CQUN0QixZQUFZO2lCQUNiO2FBQ0YsQ0FBQztLQUNILENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE9wdGlvbmFsLCBOZ1pvbmUsIEluamVjdGlvblRva2VuLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBBUFBfSU5JVElBTElaRVIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzU3VwcG9ydGVkLCBNZXNzYWdpbmcgYXMgRmlyZWJhc2VNZXNzYWdpbmcgfSBmcm9tICdmaXJlYmFzZS9tZXNzYWdpbmcnO1xuaW1wb3J0IHsgybVnZXREZWZhdWx0SW5zdGFuY2VPZiwgybVtZW1vaXplSW5zdGFuY2UsIMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzLCBWRVJTSU9OIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5pbXBvcnQgeyBNZXNzYWdpbmcsIE1lc3NhZ2luZ0luc3RhbmNlcywgTUVTU0FHSU5HX1BST1ZJREVSX05BTUUgfSBmcm9tICcuL21lc3NhZ2luZyc7XG5pbXBvcnQgeyBGaXJlYmFzZUFwcHMsIEZpcmViYXNlQXBwIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZS9hcHAnO1xuaW1wb3J0IHsgcmVnaXN0ZXJWZXJzaW9uIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcblxuY29uc3QgUFJPVklERURfTUVTU0FHSU5HX0lOU1RBTkNFUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxNZXNzYWdpbmdbXT4oJ2FuZ3VsYXJmaXJlMi5tZXNzYWdpbmctaW5zdGFuY2VzJyk7XG5jb25zdCBJU19TVVBQT1JURUQgPSBuZXcgSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj4oJ2FuZ3VsYXJmaXJlMi5tZXNzYWdpbmcuaXNTdXBwb3J0ZWQnKTtcblxuY29uc3QgaXNTdXBwb3J0ZWRTeW1ib2wgPSBTeW1ib2woJ2FuZ3VsYXJmaXJlMi5tZXNzYWdpbmcuaXNTdXBwb3J0ZWQnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXNzYWdpbmdJbnN0YW5jZUZhY3RvcnkoaXNTdXBwb3J0ZWQ6IGJvb2xlYW4sIHByb3ZpZGVkOiBGaXJlYmFzZU1lc3NhZ2luZ1tdfHVuZGVmaW5lZCwgZGVmYXVsdEFwcDogRmlyZWJhc2VBcHApIHtcbiAgY29uc3QgZGVmYXVsdEF1dGggPSBpc1N1cHBvcnRlZCA/XG4gICAgybVnZXREZWZhdWx0SW5zdGFuY2VPZjxGaXJlYmFzZU1lc3NhZ2luZz4oTUVTU0FHSU5HX1BST1ZJREVSX05BTUUsIHByb3ZpZGVkLCBkZWZhdWx0QXBwKSA6XG4gICAgdW5kZWZpbmVkO1xuICByZXR1cm4gbmV3IE1lc3NhZ2luZyhkZWZhdWx0QXV0aCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXNzYWdpbmdJbnN0YW5jZUZhY3RvcnkoZm46ICgpID0+IEZpcmViYXNlTWVzc2FnaW5nKSB7XG4gIHJldHVybiAoem9uZTogTmdab25lLCBpc1N1cHBvcnRlZDogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2luZyA9IGlzU3VwcG9ydGVkID8gybVtZW1vaXplSW5zdGFuY2U8RmlyZWJhc2VNZXNzYWdpbmc+KGZuLCB6b25lKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2luZyhtZXNzYWdpbmcpO1xuICB9O1xufVxuXG5jb25zdCBNRVNTQUdJTkdfSU5TVEFOQ0VTX1BST1ZJREVSID0ge1xuICBwcm92aWRlOiBNZXNzYWdpbmdJbnN0YW5jZXMsXG4gIGRlcHM6IFtcbiAgICBbbmV3IE9wdGlvbmFsKCksIFBST1ZJREVEX01FU1NBR0lOR19JTlNUQU5DRVMgXSxcbiAgXVxufTtcblxuY29uc3QgREVGQVVMVF9NRVNTQUdJTkdfSU5TVEFOQ0VfUFJPVklERVIgPSB7XG4gIHByb3ZpZGU6IE1lc3NhZ2luZyxcbiAgdXNlRmFjdG9yeTogZGVmYXVsdE1lc3NhZ2luZ0luc3RhbmNlRmFjdG9yeSxcbiAgZGVwczogW1xuICAgIElTX1NVUFBPUlRFRCxcbiAgICBbbmV3IE9wdGlvbmFsKCksIFBST1ZJREVEX01FU1NBR0lOR19JTlNUQU5DRVMgXSxcbiAgICBGaXJlYmFzZUFwcCxcbiAgXVxufTtcblxuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgREVGQVVMVF9NRVNTQUdJTkdfSU5TVEFOQ0VfUFJPVklERVIsXG4gICAgTUVTU0FHSU5HX0lOU1RBTkNFU19QUk9WSURFUixcbiAgICB7XG4gICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICB1c2VWYWx1ZTogKCkgPT4gaXNTdXBwb3J0ZWQoKS50aGVuKGl0ID0+IGdsb2JhbFRoaXNbaXNTdXBwb3J0ZWRTeW1ib2xdID0gaXQpLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBNZXNzYWdpbmdNb2R1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICByZWdpc3RlclZlcnNpb24oJ2FuZ3VsYXJmaXJlJywgVkVSU0lPTi5mdWxsLCAnZmNtJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVNZXNzYWdpbmcoZm46ICgpID0+IEZpcmViYXNlTWVzc2FnaW5nKTogTW9kdWxlV2l0aFByb3ZpZGVyczxNZXNzYWdpbmdNb2R1bGU+IHtcbiAgcmV0dXJuIHtcbiAgICBuZ01vZHVsZTogTWVzc2FnaW5nTW9kdWxlLFxuICAgIHByb3ZpZGVyczogW3tcbiAgICAgIHByb3ZpZGU6IElTX1NVUFBPUlRFRCxcbiAgICAgIHVzZUZhY3Rvcnk6ICgpID0+IGdsb2JhbFRoaXNbaXNTdXBwb3J0ZWRTeW1ib2xdLFxuICAgIH0sIHtcbiAgICAgIHByb3ZpZGU6IFBST1ZJREVEX01FU1NBR0lOR19JTlNUQU5DRVMsXG4gICAgICB1c2VGYWN0b3J5OiBtZXNzYWdpbmdJbnN0YW5jZUZhY3RvcnkoZm4pLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgICBkZXBzOiBbXG4gICAgICAgIE5nWm9uZSxcbiAgICAgICAgSVNfU1VQUE9SVEVELFxuICAgICAgICDJtUFuZ3VsYXJGaXJlU2NoZWR1bGVycyxcbiAgICAgICAgRmlyZWJhc2VBcHBzLFxuICAgICAgXSxcbiAgICB9XVxuICB9O1xufVxuIl19