import { NgModule, Optional, NgZone, InjectionToken } from '@angular/core';
import { AuthInstances } from '@angular/fire/auth';
import { ɵgetDefaultInstanceOf, ɵmemoizeInstance, ɵAngularFireSchedulers, VERSION } from '@angular/fire';
import { Database, DatabaseInstances, DATABASE_PROVIDER_NAME } from './database';
import { FirebaseApps, FirebaseApp } from '@angular/fire/app';
import { registerVersion } from 'firebase/app';
import * as i0 from "@angular/core";
export const PROVIDED_DATABASE_INSTANCES = new InjectionToken('angularfire2.database-instances');
export function defaultDatabaseInstanceFactory(provided, defaultApp) {
    const defaultDatabase = ɵgetDefaultInstanceOf(DATABASE_PROVIDER_NAME, provided, defaultApp);
    return new Database(defaultDatabase);
}
export function databaseInstanceFactory(fn) {
    return (zone) => {
        const database = ɵmemoizeInstance(fn, zone);
        return new Database(database);
    };
}
const DATABASE_INSTANCES_PROVIDER = {
    provide: DatabaseInstances,
    deps: [
        [new Optional(), PROVIDED_DATABASE_INSTANCES],
    ]
};
const DEFAULT_DATABASE_INSTANCE_PROVIDER = {
    provide: Database,
    useFactory: defaultDatabaseInstanceFactory,
    deps: [
        [new Optional(), PROVIDED_DATABASE_INSTANCES],
        FirebaseApp,
    ]
};
export class DatabaseModule {
    constructor() {
        registerVersion('angularfire', VERSION.full, 'rtdb');
    }
}
DatabaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DatabaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DatabaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DatabaseModule });
DatabaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DatabaseModule, providers: [
        DEFAULT_DATABASE_INSTANCE_PROVIDER,
        DATABASE_INSTANCES_PROVIDER,
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DatabaseModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        DEFAULT_DATABASE_INSTANCE_PROVIDER,
                        DATABASE_INSTANCES_PROVIDER,
                    ]
                }]
        }], ctorParameters: function () { return []; } });
export function provideDatabase(fn) {
    return {
        ngModule: DatabaseModule,
        providers: [{
                provide: PROVIDED_DATABASE_INSTANCES,
                useFactory: databaseInstanceFactory(fn),
                multi: true,
                deps: [
                    NgZone,
                    ɵAngularFireSchedulers,
                    FirebaseApps,
                    // Database+Auth work better if Auth is loaded first
                    [new Optional(), AuthInstances],
                ]
            }]
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2RhdGFiYXNlL2RhdGFiYXNlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUdoRyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGdCQUFnQixFQUFFLHNCQUFzQixFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RyxPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLHNCQUFzQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFL0MsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxjQUFjLENBQWEsaUNBQWlDLENBQUMsQ0FBQztBQUU3RyxNQUFNLFVBQVUsOEJBQThCLENBQUMsUUFBc0MsRUFBRSxVQUF1QjtJQUM1RyxNQUFNLGVBQWUsR0FBRyxxQkFBcUIsQ0FBbUIsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzlHLE9BQU8sSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxFQUEwQjtJQUNoRSxPQUFPLENBQUMsSUFBWSxFQUFFLEVBQUU7UUFDdEIsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQW1CLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5RCxPQUFPLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLDJCQUEyQixHQUFHO0lBQ2xDLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsSUFBSSxFQUFFO1FBQ0osQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLDJCQUEyQixDQUFFO0tBQy9DO0NBQ0YsQ0FBQztBQUVGLE1BQU0sa0NBQWtDLEdBQUc7SUFDekMsT0FBTyxFQUFFLFFBQVE7SUFDakIsVUFBVSxFQUFFLDhCQUE4QjtJQUMxQyxJQUFJLEVBQUU7UUFDSixDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsMkJBQTJCLENBQUU7UUFDOUMsV0FBVztLQUNaO0NBQ0YsQ0FBQztBQVFGLE1BQU0sT0FBTyxjQUFjO0lBQ3pCO1FBQ0UsZUFBZSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7OzJHQUhVLGNBQWM7NEdBQWQsY0FBYzs0R0FBZCxjQUFjLGFBTGQ7UUFDVCxrQ0FBa0M7UUFDbEMsMkJBQTJCO0tBQzVCOzJGQUVVLGNBQWM7a0JBTjFCLFFBQVE7bUJBQUM7b0JBQ1IsU0FBUyxFQUFFO3dCQUNULGtDQUFrQzt3QkFDbEMsMkJBQTJCO3FCQUM1QjtpQkFDRjs7QUFPRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEVBQTBCO0lBQ3hELE9BQU87UUFDTCxRQUFRLEVBQUUsY0FBYztRQUN4QixTQUFTLEVBQUUsQ0FBQztnQkFDVixPQUFPLEVBQUUsMkJBQTJCO2dCQUNwQyxVQUFVLEVBQUUsdUJBQXVCLENBQUMsRUFBRSxDQUFDO2dCQUN2QyxLQUFLLEVBQUUsSUFBSTtnQkFDWCxJQUFJLEVBQUU7b0JBQ0osTUFBTTtvQkFDTixzQkFBc0I7b0JBQ3RCLFlBQVk7b0JBQ1osb0RBQW9EO29CQUNwRCxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsYUFBYSxDQUFFO2lCQUNqQzthQUNGLENBQUM7S0FDSCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBPcHRpb25hbCwgTmdab25lLCBJbmplY3Rpb25Ub2tlbiwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0YWJhc2UgYXMgRmlyZWJhc2VEYXRhYmFzZSB9IGZyb20gJ2ZpcmViYXNlL2RhdGFiYXNlJztcblxuaW1wb3J0IHsgQXV0aEluc3RhbmNlcyB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUvYXV0aCc7XG5pbXBvcnQgeyDJtWdldERlZmF1bHRJbnN0YW5jZU9mLCDJtW1lbW9pemVJbnN0YW5jZSwgybVBbmd1bGFyRmlyZVNjaGVkdWxlcnMsIFZFUlNJT04gfSBmcm9tICdAYW5ndWxhci9maXJlJztcbmltcG9ydCB7IERhdGFiYXNlLCBEYXRhYmFzZUluc3RhbmNlcywgREFUQUJBU0VfUFJPVklERVJfTkFNRSB9IGZyb20gJy4vZGF0YWJhc2UnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHBzLCBGaXJlYmFzZUFwcCB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUvYXBwJztcbmltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5cbmV4cG9ydCBjb25zdCBQUk9WSURFRF9EQVRBQkFTRV9JTlNUQU5DRVMgPSBuZXcgSW5qZWN0aW9uVG9rZW48RGF0YWJhc2VbXT4oJ2FuZ3VsYXJmaXJlMi5kYXRhYmFzZS1pbnN0YW5jZXMnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHREYXRhYmFzZUluc3RhbmNlRmFjdG9yeShwcm92aWRlZDogRmlyZWJhc2VEYXRhYmFzZVtdfHVuZGVmaW5lZCwgZGVmYXVsdEFwcDogRmlyZWJhc2VBcHApIHtcbiAgY29uc3QgZGVmYXVsdERhdGFiYXNlID0gybVnZXREZWZhdWx0SW5zdGFuY2VPZjxGaXJlYmFzZURhdGFiYXNlPihEQVRBQkFTRV9QUk9WSURFUl9OQU1FLCBwcm92aWRlZCwgZGVmYXVsdEFwcCk7XG4gIHJldHVybiBuZXcgRGF0YWJhc2UoZGVmYXVsdERhdGFiYXNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFiYXNlSW5zdGFuY2VGYWN0b3J5KGZuOiAoKSA9PiBGaXJlYmFzZURhdGFiYXNlKSB7XG4gIHJldHVybiAoem9uZTogTmdab25lKSA9PiB7XG4gICAgY29uc3QgZGF0YWJhc2UgPSDJtW1lbW9pemVJbnN0YW5jZTxGaXJlYmFzZURhdGFiYXNlPihmbiwgem9uZSk7XG4gICAgcmV0dXJuIG5ldyBEYXRhYmFzZShkYXRhYmFzZSk7XG4gIH07XG59XG5cbmNvbnN0IERBVEFCQVNFX0lOU1RBTkNFU19QUk9WSURFUiA9IHtcbiAgcHJvdmlkZTogRGF0YWJhc2VJbnN0YW5jZXMsXG4gIGRlcHM6IFtcbiAgICBbbmV3IE9wdGlvbmFsKCksIFBST1ZJREVEX0RBVEFCQVNFX0lOU1RBTkNFUyBdLFxuICBdXG59O1xuXG5jb25zdCBERUZBVUxUX0RBVEFCQVNFX0lOU1RBTkNFX1BST1ZJREVSID0ge1xuICBwcm92aWRlOiBEYXRhYmFzZSxcbiAgdXNlRmFjdG9yeTogZGVmYXVsdERhdGFiYXNlSW5zdGFuY2VGYWN0b3J5LFxuICBkZXBzOiBbXG4gICAgW25ldyBPcHRpb25hbCgpLCBQUk9WSURFRF9EQVRBQkFTRV9JTlNUQU5DRVMgXSxcbiAgICBGaXJlYmFzZUFwcCxcbiAgXVxufTtcblxuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgREVGQVVMVF9EQVRBQkFTRV9JTlNUQU5DRV9QUk9WSURFUixcbiAgICBEQVRBQkFTRV9JTlNUQU5DRVNfUFJPVklERVIsXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRGF0YWJhc2VNb2R1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICByZWdpc3RlclZlcnNpb24oJ2FuZ3VsYXJmaXJlJywgVkVSU0lPTi5mdWxsLCAncnRkYicpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlRGF0YWJhc2UoZm46ICgpID0+IEZpcmViYXNlRGF0YWJhc2UpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPERhdGFiYXNlTW9kdWxlPiB7XG4gIHJldHVybiB7XG4gICAgbmdNb2R1bGU6IERhdGFiYXNlTW9kdWxlLFxuICAgIHByb3ZpZGVyczogW3tcbiAgICAgIHByb3ZpZGU6IFBST1ZJREVEX0RBVEFCQVNFX0lOU1RBTkNFUyxcbiAgICAgIHVzZUZhY3Rvcnk6IGRhdGFiYXNlSW5zdGFuY2VGYWN0b3J5KGZuKSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgZGVwczogW1xuICAgICAgICBOZ1pvbmUsXG4gICAgICAgIMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzLFxuICAgICAgICBGaXJlYmFzZUFwcHMsXG4gICAgICAgIC8vIERhdGFiYXNlK0F1dGggd29yayBiZXR0ZXIgaWYgQXV0aCBpcyBsb2FkZWQgZmlyc3RcbiAgICAgICAgW25ldyBPcHRpb25hbCgpLCBBdXRoSW5zdGFuY2VzIF0sXG4gICAgICBdXG4gICAgfV1cbiAgfTtcbn1cbiJdfQ==