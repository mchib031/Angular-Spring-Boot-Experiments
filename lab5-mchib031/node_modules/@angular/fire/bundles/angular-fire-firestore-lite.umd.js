(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/fire'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/fire/auth'), require('@angular/fire/app'), require('firebase/app'), require('rxfire/firestore/lite'), require('firebase/firestore/lite')) :
    typeof define === 'function' && define.amd ? define('@angular/fire/firestore/lite', ['exports', '@angular/fire', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/fire/auth', '@angular/fire/app', 'firebase/app', 'rxfire/firestore/lite', 'firebase/firestore/lite'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.angular = global.angular || {}, global.angular.fire = global.angular.fire || {}, global.angular.fire.firestore = global.angular.fire.firestore || {}, global.angular.fire.firestore.lite = {}), global.angular.fire, global.rxjs, global.rxjs.operators, global.ng.core, global.angular.fire.auth, global.angular.fire.app, global.app$1, global['rxfire-firestore-lite'], global['firebase-firestore-lite']));
}(this, (function (exports, fire, rxjs, operators, i0, auth, app, app$1, lite$1, lite) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var Firestore = /** @class */ (function () {
        function Firestore(firestore) {
            return firestore;
        }
        return Firestore;
    }());
    var FIRESTORE_PROVIDER_NAME = 'firestore/lite';
    var FirestoreInstances = /** @class */ (function () {
        function FirestoreInstances() {
            return fire.ɵgetAllInstancesOf(FIRESTORE_PROVIDER_NAME);
        }
        return FirestoreInstances;
    }());
    var firestoreInstance$ = rxjs.timer(0, 300).pipe(operators.concatMap(function () { return rxjs.from(fire.ɵgetAllInstancesOf(FIRESTORE_PROVIDER_NAME)); }), operators.distinct());

    var PROVIDED_FIRESTORE_INSTANCES = new i0.InjectionToken('angularfire2.firestore-lite-instances');
    function defaultFirestoreInstanceFactory(provided, defaultApp) {
        var defaultFirestore = fire.ɵgetDefaultInstanceOf(FIRESTORE_PROVIDER_NAME, provided, defaultApp);
        return new Firestore(defaultFirestore);
    }
    function firestoreInstanceFactory(fn) {
        return function (zone) {
            var firestore = fire.ɵmemoizeInstance(fn, zone);
            return new Firestore(firestore);
        };
    }
    var FIRESTORE_INSTANCES_PROVIDER = {
        provide: FirestoreInstances,
        deps: [
            [new i0.Optional(), PROVIDED_FIRESTORE_INSTANCES],
        ]
    };
    var DEFAULT_FIRESTORE_INSTANCE_PROVIDER = {
        provide: Firestore,
        useFactory: defaultFirestoreInstanceFactory,
        deps: [
            [new i0.Optional(), PROVIDED_FIRESTORE_INSTANCES],
            app.FirebaseApp,
        ]
    };
    var FirestoreModule = /** @class */ (function () {
        function FirestoreModule() {
            app$1.registerVersion('angularfire', fire.VERSION.full, 'lite');
        }
        return FirestoreModule;
    }());
    FirestoreModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FirestoreModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FirestoreModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FirestoreModule });
    FirestoreModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FirestoreModule, providers: [
            DEFAULT_FIRESTORE_INSTANCE_PROVIDER,
            FIRESTORE_INSTANCES_PROVIDER,
        ] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FirestoreModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        providers: [
                            DEFAULT_FIRESTORE_INSTANCE_PROVIDER,
                            FIRESTORE_INSTANCES_PROVIDER,
                        ]
                    }]
            }], ctorParameters: function () { return []; } });
    function provideFirestore(fn) {
        return {
            ngModule: FirestoreModule,
            providers: [{
                    provide: PROVIDED_FIRESTORE_INSTANCES,
                    useFactory: firestoreInstanceFactory(fn),
                    multi: true,
                    deps: [
                        i0.NgZone,
                        fire.ɵAngularFireSchedulers,
                        app.FirebaseApps,
                        // Firestore+Auth work better if Auth is loaded first
                        [new i0.Optional(), auth.AuthInstances],
                    ]
                }]
        };
    }

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var collectionSnapshots = fire.ɵzoneWrap(lite$1.collection, true);
    var collectionData = fire.ɵzoneWrap(lite$1.collectionData, true);
    var docSnapshots = fire.ɵzoneWrap(lite$1.doc, true);
    var docData = fire.ɵzoneWrap(lite$1.docData, true);
    var snapToData = fire.ɵzoneWrap(lite$1.snapToData, true);
    var fromRef = fire.ɵzoneWrap(lite$1.fromRef, true);

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var addDoc = fire.ɵzoneWrap(lite.addDoc, true);
    var arrayRemove = fire.ɵzoneWrap(lite.arrayRemove, true);
    var arrayUnion = fire.ɵzoneWrap(lite.arrayUnion, true);
    var collection = fire.ɵzoneWrap(lite.collection, true);
    var collectionGroup = fire.ɵzoneWrap(lite.collectionGroup, true);
    var connectFirestoreEmulator = fire.ɵzoneWrap(lite.connectFirestoreEmulator, true);
    var deleteDoc = fire.ɵzoneWrap(lite.deleteDoc, true);
    var deleteField = fire.ɵzoneWrap(lite.deleteField, true);
    var doc = fire.ɵzoneWrap(lite.doc, true);
    var documentId = fire.ɵzoneWrap(lite.documentId, true);
    var endAt = fire.ɵzoneWrap(lite.endAt, true);
    var endBefore = fire.ɵzoneWrap(lite.endBefore, true);
    var getDoc = fire.ɵzoneWrap(lite.getDoc, true);
    var getDocs = fire.ɵzoneWrap(lite.getDocs, true);
    var getFirestore = fire.ɵzoneWrap(lite.getFirestore, true);
    var increment = fire.ɵzoneWrap(lite.increment, true);
    var initializeFirestore = fire.ɵzoneWrap(lite.initializeFirestore, true);
    var limit = fire.ɵzoneWrap(lite.limit, true);
    var limitToLast = fire.ɵzoneWrap(lite.limitToLast, true);
    var orderBy = fire.ɵzoneWrap(lite.orderBy, true);
    var query = fire.ɵzoneWrap(lite.query, true);
    var queryEqual = fire.ɵzoneWrap(lite.queryEqual, true);
    var refEqual = fire.ɵzoneWrap(lite.refEqual, true);
    var runTransaction = fire.ɵzoneWrap(lite.runTransaction, true);
    var serverTimestamp = fire.ɵzoneWrap(lite.serverTimestamp, true);
    var setDoc = fire.ɵzoneWrap(lite.setDoc, true);
    var setLogLevel = fire.ɵzoneWrap(lite.setLogLevel, true);
    var snapshotEqual = fire.ɵzoneWrap(lite.snapshotEqual, true);
    var startAfter = fire.ɵzoneWrap(lite.startAfter, true);
    var startAt = fire.ɵzoneWrap(lite.startAt, true);
    var terminate = fire.ɵzoneWrap(lite.terminate, true);
    var updateDoc = fire.ɵzoneWrap(lite.updateDoc, true);
    var where = fire.ɵzoneWrap(lite.where, true);
    var writeBatch = fire.ɵzoneWrap(lite.writeBatch, true);

    /**
     * Generated bundle index. Do not edit.
     */

    exports.Firestore = Firestore;
    exports.FirestoreInstances = FirestoreInstances;
    exports.FirestoreModule = FirestoreModule;
    exports.addDoc = addDoc;
    exports.arrayRemove = arrayRemove;
    exports.arrayUnion = arrayUnion;
    exports.collection = collection;
    exports.collectionData = collectionData;
    exports.collectionGroup = collectionGroup;
    exports.collectionSnapshots = collectionSnapshots;
    exports.connectFirestoreEmulator = connectFirestoreEmulator;
    exports.deleteDoc = deleteDoc;
    exports.deleteField = deleteField;
    exports.doc = doc;
    exports.docData = docData;
    exports.docSnapshots = docSnapshots;
    exports.documentId = documentId;
    exports.endAt = endAt;
    exports.endBefore = endBefore;
    exports.firestoreInstance$ = firestoreInstance$;
    exports.fromRef = fromRef;
    exports.getDoc = getDoc;
    exports.getDocs = getDocs;
    exports.getFirestore = getFirestore;
    exports.increment = increment;
    exports.initializeFirestore = initializeFirestore;
    exports.limit = limit;
    exports.limitToLast = limitToLast;
    exports.orderBy = orderBy;
    exports.provideFirestore = provideFirestore;
    exports.query = query;
    exports.queryEqual = queryEqual;
    exports.refEqual = refEqual;
    exports.runTransaction = runTransaction;
    exports.serverTimestamp = serverTimestamp;
    exports.setDoc = setDoc;
    exports.setLogLevel = setLogLevel;
    exports.snapToData = snapToData;
    exports.snapshotEqual = snapshotEqual;
    exports.startAfter = startAfter;
    exports.startAt = startAt;
    exports.terminate = terminate;
    exports.updateDoc = updateDoc;
    exports.where = where;
    exports.writeBatch = writeBatch;
    Object.keys(lite).forEach(function (k) {
        if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return lite[k];
            }
        });
    });

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-fire-firestore-lite.umd.js.map
