(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/fire'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/fire/auth'), require('@angular/fire/app'), require('firebase/app'), require('rxfire/database'), require('firebase/database')) :
    typeof define === 'function' && define.amd ? define('@angular/fire/database', ['exports', '@angular/fire', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/fire/auth', '@angular/fire/app', 'firebase/app', 'rxfire/database', 'firebase/database'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.angular = global.angular || {}, global.angular.fire = global.angular.fire || {}, global.angular.fire.database = {}), global.angular.fire, global.rxjs, global.rxjs.operators, global.ng.core, global.angular.fire.auth, global.angular.fire.app, global.app$1, global['rxfire-database'], global['firebase-database']));
}(this, (function (exports, fire, rxjs, operators, i0, auth, app, app$1, database, database$1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var Database = /** @class */ (function () {
        function Database(database) {
            return database;
        }
        return Database;
    }());
    var DATABASE_PROVIDER_NAME = 'database';
    var DatabaseInstances = /** @class */ (function () {
        function DatabaseInstances() {
            return fire.ɵgetAllInstancesOf(DATABASE_PROVIDER_NAME);
        }
        return DatabaseInstances;
    }());
    var databaseInstance$ = rxjs.timer(0, 300).pipe(operators.concatMap(function () { return rxjs.from(fire.ɵgetAllInstancesOf(DATABASE_PROVIDER_NAME)); }), operators.distinct());

    var PROVIDED_DATABASE_INSTANCES = new i0.InjectionToken('angularfire2.database-instances');
    function defaultDatabaseInstanceFactory(provided, defaultApp) {
        var defaultDatabase = fire.ɵgetDefaultInstanceOf(DATABASE_PROVIDER_NAME, provided, defaultApp);
        return new Database(defaultDatabase);
    }
    function databaseInstanceFactory(fn) {
        return function (zone) {
            var database = fire.ɵmemoizeInstance(fn, zone);
            return new Database(database);
        };
    }
    var DATABASE_INSTANCES_PROVIDER = {
        provide: DatabaseInstances,
        deps: [
            [new i0.Optional(), PROVIDED_DATABASE_INSTANCES],
        ]
    };
    var DEFAULT_DATABASE_INSTANCE_PROVIDER = {
        provide: Database,
        useFactory: defaultDatabaseInstanceFactory,
        deps: [
            [new i0.Optional(), PROVIDED_DATABASE_INSTANCES],
            app.FirebaseApp,
        ]
    };
    var DatabaseModule = /** @class */ (function () {
        function DatabaseModule() {
            app$1.registerVersion('angularfire', fire.VERSION.full, 'rtdb');
        }
        return DatabaseModule;
    }());
    DatabaseModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DatabaseModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DatabaseModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DatabaseModule });
    DatabaseModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DatabaseModule, providers: [
            DEFAULT_DATABASE_INSTANCE_PROVIDER,
            DATABASE_INSTANCES_PROVIDER,
        ] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DatabaseModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        providers: [
                            DEFAULT_DATABASE_INSTANCE_PROVIDER,
                            DATABASE_INSTANCES_PROVIDER,
                        ]
                    }]
            }], ctorParameters: function () { return []; } });
    function provideDatabase(fn) {
        return {
            ngModule: DatabaseModule,
            providers: [{
                    provide: PROVIDED_DATABASE_INSTANCES,
                    useFactory: databaseInstanceFactory(fn),
                    multi: true,
                    deps: [
                        i0.NgZone,
                        fire.ɵAngularFireSchedulers,
                        app.FirebaseApps,
                        // Database+Auth work better if Auth is loaded first
                        [new i0.Optional(), auth.AuthInstances],
                    ]
                }]
        };
    }

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var fromRef = fire.ɵzoneWrap(database.fromRef, true);
    var stateChanges = fire.ɵzoneWrap(database.stateChanges, true);
    var list = fire.ɵzoneWrap(database.list, true);
    var listVal = fire.ɵzoneWrap(database.listVal, true);
    var auditTrail = fire.ɵzoneWrap(database.auditTrail, true);
    var object = fire.ɵzoneWrap(database.object, true);
    var objectVal = fire.ɵzoneWrap(database.objectVal, true);
    var changeToData = fire.ɵzoneWrap(database.changeToData, true);

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var child = fire.ɵzoneWrap(database$1.child, true);
    var connectDatabaseEmulator = fire.ɵzoneWrap(database$1.connectDatabaseEmulator, true);
    var enableLogging = fire.ɵzoneWrap(database$1.enableLogging, true);
    var endAt = fire.ɵzoneWrap(database$1.endAt, true);
    var endBefore = fire.ɵzoneWrap(database$1.endBefore, true);
    var equalTo = fire.ɵzoneWrap(database$1.equalTo, true);
    var get = fire.ɵzoneWrap(database$1.get, true);
    var getDatabase = fire.ɵzoneWrap(database$1.getDatabase, true);
    var goOffline = fire.ɵzoneWrap(database$1.goOffline, true);
    var goOnline = fire.ɵzoneWrap(database$1.goOnline, true);
    var increment = fire.ɵzoneWrap(database$1.increment, true);
    var limitToFirst = fire.ɵzoneWrap(database$1.limitToFirst, true);
    var limitToLast = fire.ɵzoneWrap(database$1.limitToLast, true);
    var off = fire.ɵzoneWrap(database$1.off, true);
    var onChildAdded = fire.ɵzoneWrap(database$1.onChildAdded, true);
    var onChildChanged = fire.ɵzoneWrap(database$1.onChildChanged, true);
    var onChildMoved = fire.ɵzoneWrap(database$1.onChildMoved, true);
    var onChildRemoved = fire.ɵzoneWrap(database$1.onChildRemoved, true);
    var onDisconnect = fire.ɵzoneWrap(database$1.onDisconnect, true);
    var onValue = fire.ɵzoneWrap(database$1.onValue, true);
    var orderByChild = fire.ɵzoneWrap(database$1.orderByChild, true);
    var orderByKey = fire.ɵzoneWrap(database$1.orderByKey, true);
    var orderByPriority = fire.ɵzoneWrap(database$1.orderByPriority, true);
    var orderByValue = fire.ɵzoneWrap(database$1.orderByValue, true);
    var push = fire.ɵzoneWrap(database$1.push, true);
    var query = fire.ɵzoneWrap(database$1.query, true);
    var ref = fire.ɵzoneWrap(database$1.ref, true);
    var refFromURL = fire.ɵzoneWrap(database$1.refFromURL, true);
    var remove = fire.ɵzoneWrap(database$1.remove, true);
    var runTransaction = fire.ɵzoneWrap(database$1.runTransaction, true);
    var serverTimestamp = fire.ɵzoneWrap(database$1.serverTimestamp, true);
    var set = fire.ɵzoneWrap(database$1.set, true);
    var setPriority = fire.ɵzoneWrap(database$1.setPriority, true);
    var setWithPriority = fire.ɵzoneWrap(database$1.setWithPriority, true);
    var startAfter = fire.ɵzoneWrap(database$1.startAfter, true);
    var startAt = fire.ɵzoneWrap(database$1.startAt, true);
    var update = fire.ɵzoneWrap(database$1.update, true);

    /**
     * Generated bundle index. Do not edit.
     */

    Object.defineProperty(exports, 'ListenEvent', {
        enumerable: true,
        get: function () {
            return database.ListenEvent;
        }
    });
    Object.defineProperty(exports, 'ListenerMethods', {
        enumerable: true,
        get: function () {
            return database.ListenerMethods;
        }
    });
    exports.Database = Database;
    exports.DatabaseInstances = DatabaseInstances;
    exports.DatabaseModule = DatabaseModule;
    exports.auditTrail = auditTrail;
    exports.changeToData = changeToData;
    exports.child = child;
    exports.connectDatabaseEmulator = connectDatabaseEmulator;
    exports.databaseInstance$ = databaseInstance$;
    exports.enableLogging = enableLogging;
    exports.endAt = endAt;
    exports.endBefore = endBefore;
    exports.equalTo = equalTo;
    exports.fromRef = fromRef;
    exports.get = get;
    exports.getDatabase = getDatabase;
    exports.goOffline = goOffline;
    exports.goOnline = goOnline;
    exports.increment = increment;
    exports.limitToFirst = limitToFirst;
    exports.limitToLast = limitToLast;
    exports.list = list;
    exports.listVal = listVal;
    exports.object = object;
    exports.objectVal = objectVal;
    exports.off = off;
    exports.onChildAdded = onChildAdded;
    exports.onChildChanged = onChildChanged;
    exports.onChildMoved = onChildMoved;
    exports.onChildRemoved = onChildRemoved;
    exports.onDisconnect = onDisconnect;
    exports.onValue = onValue;
    exports.orderByChild = orderByChild;
    exports.orderByKey = orderByKey;
    exports.orderByPriority = orderByPriority;
    exports.orderByValue = orderByValue;
    exports.provideDatabase = provideDatabase;
    exports.push = push;
    exports.query = query;
    exports.ref = ref;
    exports.refFromURL = refFromURL;
    exports.remove = remove;
    exports.runTransaction = runTransaction;
    exports.serverTimestamp = serverTimestamp;
    exports.set = set;
    exports.setPriority = setPriority;
    exports.setWithPriority = setWithPriority;
    exports.startAfter = startAfter;
    exports.startAt = startAt;
    exports.stateChanges = stateChanges;
    exports.update = update;
    Object.keys(database$1).forEach(function (k) {
        if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return database$1[k];
            }
        });
    });

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-fire-database.umd.js.map
