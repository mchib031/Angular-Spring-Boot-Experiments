(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/fire'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/fire/app'), require('firebase/app'), require('rxfire/remote-config'), require('firebase/remote-config')) :
    typeof define === 'function' && define.amd ? define('@angular/fire/remote-config', ['exports', '@angular/fire', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/fire/app', 'firebase/app', 'rxfire/remote-config', 'firebase/remote-config'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.angular = global.angular || {}, global.angular.fire = global.angular.fire || {}, global.angular.fire['remote-config'] = {}), global.angular.fire, global.rxjs, global.rxjs.operators, global.ng.core, global.angular.fire.app, global.app$1, global['rxfire-remote-config'], global['firebase-remote-config']));
}(this, (function (exports, fire, rxjs, operators, i0, app, app$1, remoteConfig$1, remoteConfig) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var RemoteConfig = /** @class */ (function () {
        function RemoteConfig(remoteConfig) {
            return remoteConfig;
        }
        return RemoteConfig;
    }());
    var REMOTE_CONFIG_PROVIDER_NAME = 'remote-config';
    var RemoteConfigInstances = /** @class */ (function () {
        function RemoteConfigInstances() {
            return fire.ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME);
        }
        return RemoteConfigInstances;
    }());
    var remoteConfigInstance$ = rxjs.timer(0, 300).pipe(operators.concatMap(function () { return rxjs.from(fire.ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME)); }), operators.distinct());

    var PROVIDED_REMOTE_CONFIG_INSTANCES = new i0.InjectionToken('angularfire2.remote-config-instances');
    function defaultRemoteConfigInstanceFactory(provided, defaultApp) {
        var defaultRemoteConfig = fire.ɵgetDefaultInstanceOf(REMOTE_CONFIG_PROVIDER_NAME, provided, defaultApp);
        return new RemoteConfig(defaultRemoteConfig);
    }
    function remoteConfigInstanceFactory(fn) {
        return function (zone) {
            var remoteConfig = fire.ɵmemoizeInstance(fn, zone);
            return new RemoteConfig(remoteConfig);
        };
    }
    var REMOTE_CONFIG_INSTANCES_PROVIDER = {
        provide: RemoteConfigInstances,
        deps: [
            [new i0.Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES],
        ]
    };
    var DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER = {
        provide: RemoteConfig,
        useFactory: defaultRemoteConfigInstanceFactory,
        deps: [
            [new i0.Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES],
            app.FirebaseApp,
        ]
    };
    var RemoteConfigModule = /** @class */ (function () {
        function RemoteConfigModule() {
            app$1.registerVersion('angularfire', fire.VERSION.full, 'rc');
        }
        return RemoteConfigModule;
    }());
    RemoteConfigModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RemoteConfigModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RemoteConfigModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RemoteConfigModule });
    RemoteConfigModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RemoteConfigModule, providers: [
            DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER,
            REMOTE_CONFIG_INSTANCES_PROVIDER,
        ] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RemoteConfigModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        providers: [
                            DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER,
                            REMOTE_CONFIG_INSTANCES_PROVIDER,
                        ]
                    }]
            }], ctorParameters: function () { return []; } });
    function provideRemoteConfig(fn) {
        return {
            ngModule: RemoteConfigModule,
            providers: [{
                    provide: PROVIDED_REMOTE_CONFIG_INSTANCES,
                    useFactory: remoteConfigInstanceFactory(fn),
                    multi: true,
                    deps: [
                        i0.NgZone,
                        fire.ɵAngularFireSchedulers,
                        app.FirebaseApps,
                    ]
                }]
        };
    }

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var getValueChanges = fire.ɵzoneWrap(remoteConfig$1.getValue, true);
    var getStringChanges = fire.ɵzoneWrap(remoteConfig$1.getString, true);
    var getNumberChanges = fire.ɵzoneWrap(remoteConfig$1.getNumber, true);
    var getBooleanChanges = fire.ɵzoneWrap(remoteConfig$1.getBoolean, true);
    var getAllChanges = fire.ɵzoneWrap(remoteConfig$1.getAll, true);

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var activate = fire.ɵzoneWrap(remoteConfig.activate, true);
    var ensureInitialized = fire.ɵzoneWrap(remoteConfig.ensureInitialized, true);
    var fetchAndActivate = fire.ɵzoneWrap(remoteConfig.fetchAndActivate, true);
    var fetchConfig = fire.ɵzoneWrap(remoteConfig.fetchConfig, true);
    var getAll = fire.ɵzoneWrap(remoteConfig.getAll, true);
    var getBoolean = fire.ɵzoneWrap(remoteConfig.getBoolean, true);
    var getNumber = fire.ɵzoneWrap(remoteConfig.getNumber, true);
    var getRemoteConfig = fire.ɵzoneWrap(remoteConfig.getRemoteConfig, true);
    var getString = fire.ɵzoneWrap(remoteConfig.getString, true);
    var getValue = fire.ɵzoneWrap(remoteConfig.getValue, true);
    var setLogLevel = fire.ɵzoneWrap(remoteConfig.setLogLevel, true);

    /**
     * Generated bundle index. Do not edit.
     */

    exports.RemoteConfig = RemoteConfig;
    exports.RemoteConfigInstances = RemoteConfigInstances;
    exports.RemoteConfigModule = RemoteConfigModule;
    exports.activate = activate;
    exports.ensureInitialized = ensureInitialized;
    exports.fetchAndActivate = fetchAndActivate;
    exports.fetchConfig = fetchConfig;
    exports.getAll = getAll;
    exports.getAllChanges = getAllChanges;
    exports.getBoolean = getBoolean;
    exports.getBooleanChanges = getBooleanChanges;
    exports.getNumber = getNumber;
    exports.getNumberChanges = getNumberChanges;
    exports.getRemoteConfig = getRemoteConfig;
    exports.getString = getString;
    exports.getStringChanges = getStringChanges;
    exports.getValue = getValue;
    exports.getValueChanges = getValueChanges;
    exports.provideRemoteConfig = provideRemoteConfig;
    exports.remoteConfigInstance$ = remoteConfigInstance$;
    exports.setLogLevel = setLogLevel;
    Object.keys(remoteConfig).forEach(function (k) {
        if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return remoteConfig[k];
            }
        });
    });

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-fire-remote-config.umd.js.map
