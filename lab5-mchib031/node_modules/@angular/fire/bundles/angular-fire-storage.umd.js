(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/fire'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/fire/app'), require('@angular/fire/auth'), require('firebase/app'), require('rxfire/storage'), require('firebase/storage')) :
    typeof define === 'function' && define.amd ? define('@angular/fire/storage', ['exports', '@angular/fire', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/fire/app', '@angular/fire/auth', 'firebase/app', 'rxfire/storage', 'firebase/storage'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.angular = global.angular || {}, global.angular.fire = global.angular.fire || {}, global.angular.fire.storage = {}), global.angular.fire, global.rxjs, global.rxjs.operators, global.ng.core, global.angular.fire.app, global.angular.fire.auth, global.app$1, global['rxfire-storage'], global['firebase-storage']));
}(this, (function (exports, fire, rxjs, operators, i0, app, auth, app$1, storage$1, storage) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var Storage = /** @class */ (function () {
        function Storage(auth) {
            return auth;
        }
        return Storage;
    }());
    var STORAGE_PROVIDER_NAME = 'storage';
    var StorageInstances = /** @class */ (function () {
        function StorageInstances() {
            return fire.ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME);
        }
        return StorageInstances;
    }());
    var storageInstance$ = rxjs.timer(0, 300).pipe(operators.concatMap(function () { return rxjs.from(fire.ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME)); }), operators.distinct());

    var PROVIDED_STORAGE_INSTANCES = new i0.InjectionToken('angularfire2.storage-instances');
    function defaultStorageInstanceFactory(provided, defaultApp) {
        var defaultAuth = fire.ɵgetDefaultInstanceOf(STORAGE_PROVIDER_NAME, provided, defaultApp);
        return new Storage(defaultAuth);
    }
    function storageInstanceFactory(fn) {
        return function (zone) {
            var storage = fire.ɵmemoizeInstance(fn, zone);
            return new Storage(storage);
        };
    }
    var STORAGE_INSTANCES_PROVIDER = {
        provide: StorageInstances,
        deps: [
            [new i0.Optional(), PROVIDED_STORAGE_INSTANCES],
        ]
    };
    var DEFAULT_STORAGE_INSTANCE_PROVIDER = {
        provide: Storage,
        useFactory: defaultStorageInstanceFactory,
        deps: [
            [new i0.Optional(), PROVIDED_STORAGE_INSTANCES],
            app.FirebaseApp,
        ]
    };
    var StorageModule = /** @class */ (function () {
        function StorageModule() {
            app$1.registerVersion('angularfire', fire.VERSION.full, 'gcs');
        }
        return StorageModule;
    }());
    StorageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: StorageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    StorageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: StorageModule });
    StorageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: StorageModule, providers: [
            DEFAULT_STORAGE_INSTANCE_PROVIDER,
            STORAGE_INSTANCES_PROVIDER,
        ] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: StorageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        providers: [
                            DEFAULT_STORAGE_INSTANCE_PROVIDER,
                            STORAGE_INSTANCES_PROVIDER,
                        ]
                    }]
            }], ctorParameters: function () { return []; } });
    function provideStorage(fn) {
        return {
            ngModule: StorageModule,
            providers: [{
                    provide: PROVIDED_STORAGE_INSTANCES,
                    useFactory: storageInstanceFactory(fn),
                    multi: true,
                    deps: [
                        i0.NgZone,
                        fire.ɵAngularFireSchedulers,
                        app.FirebaseApps,
                        // Defensively load Auth first, if provided
                        [new i0.Optional(), auth.AuthInstances],
                    ]
                }]
        };
    }

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var fromTask = fire.ɵzoneWrap(storage$1.fromTask, true);
    var percentage = fire.ɵzoneWrap(storage$1.percentage, true);

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var connectStorageEmulator = fire.ɵzoneWrap(storage.connectStorageEmulator, true);
    var deleteObject = fire.ɵzoneWrap(storage.deleteObject, true);
    var getDownloadURL = fire.ɵzoneWrap(storage.getDownloadURL, true);
    var getMetadata = fire.ɵzoneWrap(storage.getMetadata, true);
    var getStorage = fire.ɵzoneWrap(storage.getStorage, true);
    var list = fire.ɵzoneWrap(storage.list, true);
    var listAll = fire.ɵzoneWrap(storage.listAll, true);
    var ref = fire.ɵzoneWrap(storage.ref, true);
    var updateMetadata = fire.ɵzoneWrap(storage.updateMetadata, true);
    var uploadBytes = fire.ɵzoneWrap(storage.uploadBytes, true);
    var uploadBytesResumable = fire.ɵzoneWrap(storage.uploadBytesResumable, true);
    var uploadString = fire.ɵzoneWrap(storage.uploadString, true);

    /**
     * Generated bundle index. Do not edit.
     */

    exports.Storage = Storage;
    exports.StorageInstances = StorageInstances;
    exports.StorageModule = StorageModule;
    exports.connectStorageEmulator = connectStorageEmulator;
    exports.deleteObject = deleteObject;
    exports.fromTask = fromTask;
    exports.getDownloadURL = getDownloadURL;
    exports.getMetadata = getMetadata;
    exports.getStorage = getStorage;
    exports.list = list;
    exports.listAll = listAll;
    exports.percentage = percentage;
    exports.provideStorage = provideStorage;
    exports.ref = ref;
    exports.storageInstance$ = storageInstance$;
    exports.updateMetadata = updateMetadata;
    exports.uploadBytes = uploadBytes;
    exports.uploadBytesResumable = uploadBytesResumable;
    exports.uploadString = uploadString;
    Object.keys(storage).forEach(function (k) {
        if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return storage[k];
            }
        });
    });

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-fire-storage.umd.js.map
