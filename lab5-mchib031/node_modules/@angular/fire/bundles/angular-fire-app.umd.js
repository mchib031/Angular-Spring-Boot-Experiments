(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('firebase/app'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/fire')) :
    typeof define === 'function' && define.amd ? define('@angular/fire/app', ['exports', 'firebase/app', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/fire'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.angular = global.angular || {}, global.angular.fire = global.angular.fire || {}, global.angular.fire.app = {}), global['firebase-app'], global.rxjs, global.rxjs.operators, global.ng.core, global.angular.fire));
}(this, (function (exports, app, rxjs, operators, i0, fire) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var FirebaseApp = /** @class */ (function () {
        function FirebaseApp(app) {
            return app;
        }
        return FirebaseApp;
    }());
    var FirebaseApps = /** @class */ (function () {
        function FirebaseApps() {
            return app.getApps();
        }
        return FirebaseApps;
    }());
    var firebaseApp$ = rxjs.timer(0, 300).pipe(operators.concatMap(function () { return rxjs.from(app.getApps()); }), operators.distinct());

    function defaultFirebaseAppFactory(provided) {
        // Use the provided app, if there is only one, otherwise fetch the default app
        if (provided && provided.length === 1) {
            return provided[0];
        }
        return new FirebaseApp(app.getApp());
    }
    // With FIREBASE_APPS I wanted to capture the default app instance, if it is initialized by
    // the reserved URL; ɵPROVIDED_FIREBASE_APPS is not for public consumption and serves to ensure that all
    // provideFirebaseApp(...) calls are satisfied before FirebaseApp$ or FirebaseApp is resolved
    var PROVIDED_FIREBASE_APPS = new i0.InjectionToken('angularfire2._apps');
    // Injecting FirebaseApp will now only inject the default Firebase App
    // this allows allows beginners to import /__/firebase/init.js to auto initialize Firebase App
    // from the reserved URL.
    var DEFAULT_FIREBASE_APP_PROVIDER = {
        provide: FirebaseApp,
        useFactory: defaultFirebaseAppFactory,
        deps: [
            [new i0.Optional(), PROVIDED_FIREBASE_APPS],
        ],
    };
    var FIREBASE_APPS_PROVIDER = {
        provide: FirebaseApps,
        deps: [
            [new i0.Optional(), PROVIDED_FIREBASE_APPS],
        ],
    };
    function firebaseAppFactory(fn) {
        return function (zone) {
            var app = fire.ɵmemoizeInstance(fn, zone);
            return new FirebaseApp(app);
        };
    }
    var FirebaseAppModule = /** @class */ (function () {
        // tslint:disable-next-line:ban-types
        function FirebaseAppModule(platformId) {
            app.registerVersion('angularfire', fire.VERSION.full, 'core');
            app.registerVersion('angularfire', fire.VERSION.full, 'app');
            app.registerVersion('angular', i0.VERSION.full, platformId.toString());
        }
        return FirebaseAppModule;
    }());
    FirebaseAppModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FirebaseAppModule, deps: [{ token: i0.PLATFORM_ID }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FirebaseAppModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FirebaseAppModule });
    FirebaseAppModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FirebaseAppModule, providers: [
            DEFAULT_FIREBASE_APP_PROVIDER,
            FIREBASE_APPS_PROVIDER,
        ] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FirebaseAppModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        providers: [
                            DEFAULT_FIREBASE_APP_PROVIDER,
                            FIREBASE_APPS_PROVIDER,
                        ]
                    }]
            }], ctorParameters: function () {
            return [{ type: Object, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        } });
    // Calling initializeApp({ ... }, 'name') multiple times will add more FirebaseApps into the FIREBASE_APPS
    // injection scope. This allows developers to more easily work with multiple Firebase Applications. Downside
    // is that DI for app name and options doesn't really make sense anymore.
    function provideFirebaseApp(fn) {
        return {
            ngModule: FirebaseAppModule,
            providers: [{
                    provide: PROVIDED_FIREBASE_APPS,
                    useFactory: firebaseAppFactory(fn),
                    multi: true,
                    deps: [i0.NgZone, fire.ɵAngularFireSchedulers],
                }],
        };
    }

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var deleteApp = fire.ɵzoneWrap(app.deleteApp, true);
    var getApp = fire.ɵzoneWrap(app.getApp, true);
    var getApps = fire.ɵzoneWrap(app.getApps, true);
    var initializeApp = fire.ɵzoneWrap(app.initializeApp, true);
    var onLog = fire.ɵzoneWrap(app.onLog, true);
    var registerVersion = fire.ɵzoneWrap(app.registerVersion, true);
    var setLogLevel = fire.ɵzoneWrap(app.setLogLevel, true);

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FirebaseApp = FirebaseApp;
    exports.FirebaseAppModule = FirebaseAppModule;
    exports.FirebaseApps = FirebaseApps;
    exports.deleteApp = deleteApp;
    exports.firebaseApp$ = firebaseApp$;
    exports.getApp = getApp;
    exports.getApps = getApps;
    exports.initializeApp = initializeApp;
    exports.onLog = onLog;
    exports.provideFirebaseApp = provideFirebaseApp;
    exports.registerVersion = registerVersion;
    exports.setLogLevel = setLogLevel;
    Object.keys(app).forEach(function (k) {
        if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return app[k];
            }
        });
    });

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-fire-app.umd.js.map
