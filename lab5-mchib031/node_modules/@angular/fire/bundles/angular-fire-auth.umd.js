(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/fire'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/fire/app'), require('firebase/app'), require('rxfire/auth'), require('firebase/auth')) :
    typeof define === 'function' && define.amd ? define('@angular/fire/auth', ['exports', '@angular/fire', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/fire/app', 'firebase/app', 'rxfire/auth', 'firebase/auth'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.angular = global.angular || {}, global.angular.fire = global.angular.fire || {}, global.angular.fire.auth = {}), global.angular.fire, global.rxjs, global.rxjs.operators, global.ng.core, global.angular.fire.app, global.app$1, global['rxfire-auth'], global['firebase-auth']));
}(this, (function (exports, fire, rxjs, operators, i0, app, app$1, auth$1, auth) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var AUTH_PROVIDER_NAME = 'auth';
    var Auth = /** @class */ (function () {
        function Auth(auth) {
            return auth;
        }
        return Auth;
    }());
    var AuthInstances = /** @class */ (function () {
        // tslint:disable-next-line:ban-types
        function AuthInstances() {
            return fire.ɵgetAllInstancesOf(AUTH_PROVIDER_NAME);
        }
        return AuthInstances;
    }());
    var authInstance$ = rxjs.timer(0, 300).pipe(operators.concatMap(function () { return rxjs.from(fire.ɵgetAllInstancesOf(AUTH_PROVIDER_NAME)); }), operators.distinct());

    var PROVIDED_AUTH_INSTANCES = new i0.InjectionToken('angularfire2.auth-instances');
    function defaultAuthInstanceFactory(provided, defaultApp) {
        var defaultAuth = fire.ɵgetDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);
        return new Auth(defaultAuth);
    }
    function authInstanceFactory(fn) {
        return function (zone) {
            return fire.ɵmemoizeInstance(fn, zone);
        };
    }
    var AUTH_INSTANCES_PROVIDER = {
        provide: AuthInstances,
        deps: [
            [new i0.Optional(), PROVIDED_AUTH_INSTANCES],
        ]
    };
    var DEFAULT_AUTH_INSTANCE_PROVIDER = {
        provide: Auth,
        useFactory: defaultAuthInstanceFactory,
        deps: [
            [new i0.Optional(), PROVIDED_AUTH_INSTANCES],
            app.FirebaseApp,
            i0.PLATFORM_ID,
        ]
    };
    var AuthModule = /** @class */ (function () {
        function AuthModule() {
            app$1.registerVersion('angularfire', fire.VERSION.full, 'auth');
        }
        return AuthModule;
    }());
    AuthModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AuthModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AuthModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AuthModule });
    AuthModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AuthModule, providers: [
            DEFAULT_AUTH_INSTANCE_PROVIDER,
            AUTH_INSTANCES_PROVIDER,
        ] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AuthModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        providers: [
                            DEFAULT_AUTH_INSTANCE_PROVIDER,
                            AUTH_INSTANCES_PROVIDER,
                        ]
                    }]
            }], ctorParameters: function () { return []; } });
    function provideAuth(fn) {
        return {
            ngModule: AuthModule,
            providers: [{
                    provide: PROVIDED_AUTH_INSTANCES,
                    useFactory: authInstanceFactory(fn),
                    multi: true,
                    deps: [
                        i0.NgZone,
                        i0.PLATFORM_ID,
                        fire.ɵAngularFireSchedulers,
                        app.FirebaseApps,
                    ]
                }]
        };
    }

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var authState = fire.ɵzoneWrap(auth$1.authState, true);
    var user = fire.ɵzoneWrap(auth$1.user, true);
    var idToken = fire.ɵzoneWrap(auth$1.idToken, true);

    // DO NOT MODIFY, this file is autogenerated by tools/build.ts
    var applyActionCode = fire.ɵzoneWrap(auth.applyActionCode, true);
    var checkActionCode = fire.ɵzoneWrap(auth.checkActionCode, true);
    var confirmPasswordReset = fire.ɵzoneWrap(auth.confirmPasswordReset, true);
    var connectAuthEmulator = fire.ɵzoneWrap(auth.connectAuthEmulator, true);
    var createUserWithEmailAndPassword = fire.ɵzoneWrap(auth.createUserWithEmailAndPassword, true);
    var deleteUser = fire.ɵzoneWrap(auth.deleteUser, true);
    var fetchSignInMethodsForEmail = fire.ɵzoneWrap(auth.fetchSignInMethodsForEmail, true);
    var getAdditionalUserInfo = fire.ɵzoneWrap(auth.getAdditionalUserInfo, true);
    var getAuth = fire.ɵzoneWrap(auth.getAuth, true);
    var getIdToken = fire.ɵzoneWrap(auth.getIdToken, true);
    var getIdTokenResult = fire.ɵzoneWrap(auth.getIdTokenResult, true);
    var getMultiFactorResolver = fire.ɵzoneWrap(auth.getMultiFactorResolver, true);
    var getRedirectResult = fire.ɵzoneWrap(auth.getRedirectResult, true);
    var initializeAuth = fire.ɵzoneWrap(auth.initializeAuth, true);
    var isSignInWithEmailLink = fire.ɵzoneWrap(auth.isSignInWithEmailLink, true);
    var linkWithCredential = fire.ɵzoneWrap(auth.linkWithCredential, true);
    var linkWithPhoneNumber = fire.ɵzoneWrap(auth.linkWithPhoneNumber, true);
    var linkWithPopup = fire.ɵzoneWrap(auth.linkWithPopup, true);
    var linkWithRedirect = fire.ɵzoneWrap(auth.linkWithRedirect, true);
    var multiFactor = fire.ɵzoneWrap(auth.multiFactor, true);
    var onAuthStateChanged = fire.ɵzoneWrap(auth.onAuthStateChanged, true);
    var onIdTokenChanged = fire.ɵzoneWrap(auth.onIdTokenChanged, true);
    var parseActionCodeURL = fire.ɵzoneWrap(auth.parseActionCodeURL, true);
    var reauthenticateWithCredential = fire.ɵzoneWrap(auth.reauthenticateWithCredential, true);
    var reauthenticateWithPhoneNumber = fire.ɵzoneWrap(auth.reauthenticateWithPhoneNumber, true);
    var reauthenticateWithPopup = fire.ɵzoneWrap(auth.reauthenticateWithPopup, true);
    var reauthenticateWithRedirect = fire.ɵzoneWrap(auth.reauthenticateWithRedirect, true);
    var reload = fire.ɵzoneWrap(auth.reload, true);
    var sendEmailVerification = fire.ɵzoneWrap(auth.sendEmailVerification, true);
    var sendPasswordResetEmail = fire.ɵzoneWrap(auth.sendPasswordResetEmail, true);
    var sendSignInLinkToEmail = fire.ɵzoneWrap(auth.sendSignInLinkToEmail, true);
    var setPersistence = fire.ɵzoneWrap(auth.setPersistence, true);
    var signInAnonymously = fire.ɵzoneWrap(auth.signInAnonymously, true);
    var signInWithCredential = fire.ɵzoneWrap(auth.signInWithCredential, true);
    var signInWithCustomToken = fire.ɵzoneWrap(auth.signInWithCustomToken, true);
    var signInWithEmailAndPassword = fire.ɵzoneWrap(auth.signInWithEmailAndPassword, true);
    var signInWithEmailLink = fire.ɵzoneWrap(auth.signInWithEmailLink, true);
    var signInWithPhoneNumber = fire.ɵzoneWrap(auth.signInWithPhoneNumber, true);
    var signInWithPopup = fire.ɵzoneWrap(auth.signInWithPopup, true);
    var signInWithRedirect = fire.ɵzoneWrap(auth.signInWithRedirect, true);
    var signOut = fire.ɵzoneWrap(auth.signOut, true);
    var unlink = fire.ɵzoneWrap(auth.unlink, true);
    var updateCurrentUser = fire.ɵzoneWrap(auth.updateCurrentUser, true);
    var updateEmail = fire.ɵzoneWrap(auth.updateEmail, true);
    var updatePassword = fire.ɵzoneWrap(auth.updatePassword, true);
    var updatePhoneNumber = fire.ɵzoneWrap(auth.updatePhoneNumber, true);
    var updateProfile = fire.ɵzoneWrap(auth.updateProfile, true);
    var useDeviceLanguage = fire.ɵzoneWrap(auth.useDeviceLanguage, true);
    var verifyBeforeUpdateEmail = fire.ɵzoneWrap(auth.verifyBeforeUpdateEmail, true);
    var verifyPasswordResetCode = fire.ɵzoneWrap(auth.verifyPasswordResetCode, true);

    /**
     * Generated bundle index. Do not edit.
     */

    exports.Auth = Auth;
    exports.AuthInstances = AuthInstances;
    exports.AuthModule = AuthModule;
    exports.applyActionCode = applyActionCode;
    exports.authInstance$ = authInstance$;
    exports.authState = authState;
    exports.checkActionCode = checkActionCode;
    exports.confirmPasswordReset = confirmPasswordReset;
    exports.connectAuthEmulator = connectAuthEmulator;
    exports.createUserWithEmailAndPassword = createUserWithEmailAndPassword;
    exports.deleteUser = deleteUser;
    exports.fetchSignInMethodsForEmail = fetchSignInMethodsForEmail;
    exports.getAdditionalUserInfo = getAdditionalUserInfo;
    exports.getAuth = getAuth;
    exports.getIdToken = getIdToken;
    exports.getIdTokenResult = getIdTokenResult;
    exports.getMultiFactorResolver = getMultiFactorResolver;
    exports.getRedirectResult = getRedirectResult;
    exports.idToken = idToken;
    exports.initializeAuth = initializeAuth;
    exports.isSignInWithEmailLink = isSignInWithEmailLink;
    exports.linkWithCredential = linkWithCredential;
    exports.linkWithPhoneNumber = linkWithPhoneNumber;
    exports.linkWithPopup = linkWithPopup;
    exports.linkWithRedirect = linkWithRedirect;
    exports.multiFactor = multiFactor;
    exports.onAuthStateChanged = onAuthStateChanged;
    exports.onIdTokenChanged = onIdTokenChanged;
    exports.parseActionCodeURL = parseActionCodeURL;
    exports.provideAuth = provideAuth;
    exports.reauthenticateWithCredential = reauthenticateWithCredential;
    exports.reauthenticateWithPhoneNumber = reauthenticateWithPhoneNumber;
    exports.reauthenticateWithPopup = reauthenticateWithPopup;
    exports.reauthenticateWithRedirect = reauthenticateWithRedirect;
    exports.reload = reload;
    exports.sendEmailVerification = sendEmailVerification;
    exports.sendPasswordResetEmail = sendPasswordResetEmail;
    exports.sendSignInLinkToEmail = sendSignInLinkToEmail;
    exports.setPersistence = setPersistence;
    exports.signInAnonymously = signInAnonymously;
    exports.signInWithCredential = signInWithCredential;
    exports.signInWithCustomToken = signInWithCustomToken;
    exports.signInWithEmailAndPassword = signInWithEmailAndPassword;
    exports.signInWithEmailLink = signInWithEmailLink;
    exports.signInWithPhoneNumber = signInWithPhoneNumber;
    exports.signInWithPopup = signInWithPopup;
    exports.signInWithRedirect = signInWithRedirect;
    exports.signOut = signOut;
    exports.unlink = unlink;
    exports.updateCurrentUser = updateCurrentUser;
    exports.updateEmail = updateEmail;
    exports.updatePassword = updatePassword;
    exports.updatePhoneNumber = updatePhoneNumber;
    exports.updateProfile = updateProfile;
    exports.useDeviceLanguage = useDeviceLanguage;
    exports.user = user;
    exports.verifyBeforeUpdateEmail = verifyBeforeUpdateEmail;
    exports.verifyPasswordResetCode = verifyPasswordResetCode;
    Object.keys(auth).forEach(function (k) {
        if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
            enumerable: true,
            get: function () {
                return auth[k];
            }
        });
    });

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-fire-auth.umd.js.map
