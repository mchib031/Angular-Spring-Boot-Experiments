{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, NgZone, Optional, VERSION as VERSION$1, PLATFORM_ID, NgModule, Inject } from '@angular/core';\nimport firebase from 'firebase/compat/app';\nimport { VERSION } from '@angular/fire'; // DEBUG quick debugger function for inline logging that typescript doesn't complain about\n//       wrote it for debugging the ɵlazySDKProxy, commenting out for now; should consider exposing a\n//       verbose mode for AngularFire in a future release that uses something like this in multiple places\n//       usage: () => log('something') || returnValue\n// const log = (...args: any[]): false => { console.log(...args); return false }\n// The problem here are things like ngOnDestroy are missing, then triggering the service\n// rather than dig too far; I'm capturing these as I go.\n\nconst noopFunctions = ['ngOnDestroy']; // INVESTIGATE should we make the Proxy revokable and do some cleanup?\n//             right now it's fairly simple but I'm sure this will grow in complexity\n\nconst ɵlazySDKProxy = (klass, observable, zone, options = {}) => {\n  return new Proxy(klass, {\n    get: (_, name) => zone.runOutsideAngular(() => {\n      var _a;\n\n      if (klass[name]) {\n        if ((_a = options === null || options === void 0 ? void 0 : options.spy) === null || _a === void 0 ? void 0 : _a.get) {\n          options.spy.get(name, klass[name]);\n        }\n\n        return klass[name];\n      }\n\n      if (noopFunctions.indexOf(name) > -1) {\n        return () => {};\n      }\n\n      const promise = observable.toPromise().then(mod => {\n        const ret = mod && mod[name]; // TODO move to proper type guards\n\n        if (typeof ret === 'function') {\n          return ret.bind(mod);\n        } else if (ret && ret.then) {\n          return ret.then(res => zone.run(() => res));\n        } else {\n          return zone.run(() => ret);\n        }\n      }); // recurse the proxy\n\n      return new Proxy(() => {}, {\n        get: (_, name) => promise[name],\n        // TODO handle callbacks as transparently as I can\n        apply: (self, _, args) => promise.then(it => {\n          var _a;\n\n          const res = it && it(...args);\n\n          if ((_a = options === null || options === void 0 ? void 0 : options.spy) === null || _a === void 0 ? void 0 : _a.apply) {\n            options.spy.apply(name, args, res);\n          }\n\n          return res;\n        })\n      });\n    })\n  });\n};\n\nconst ɵapplyMixins = (derivedCtor, constructors) => {\n  constructors.forEach(baseCtor => {\n    Object.getOwnPropertyNames(baseCtor.prototype || baseCtor).forEach(name => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype || baseCtor, name));\n    });\n  });\n};\n\nclass FirebaseApp {\n  constructor(app) {\n    return app;\n  }\n\n}\n\nconst FIREBASE_OPTIONS = new InjectionToken('angularfire2.app.options');\nconst FIREBASE_APP_NAME = new InjectionToken('angularfire2.app.name');\n\nfunction ɵfirebaseAppFactory(options, zone, nameOrConfig) {\n  const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';\n  const config = typeof nameOrConfig === 'object' && nameOrConfig || {};\n  config.name = config.name || name; // Added any due to some inconsistency between @firebase/app and firebase types\n\n  const existingApp = firebase.apps.filter(app => app && app.name === config.name)[0]; // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any\n  // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206\n\n  const app = existingApp || zone.runOutsideAngular(() => firebase.initializeApp(options, config));\n\n  try {\n    if (JSON.stringify(options) !== JSON.stringify(app.options)) {\n      const hmr = !!module.hot;\n      log('error', `${app.name} Firebase App already initialized with different options${hmr ? ', you may need to reload as Firebase is not HMR aware.' : '.'}`);\n    }\n  } catch (e) {}\n\n  return new FirebaseApp(app);\n}\n\nconst log = (level, ...args) => {\n  if (isDevMode() && typeof console !== 'undefined') {\n    console[level](...args);\n  }\n};\n\nconst FIREBASE_APP_PROVIDER = {\n  provide: FirebaseApp,\n  useFactory: ɵfirebaseAppFactory,\n  deps: [FIREBASE_OPTIONS, NgZone, [new Optional(), FIREBASE_APP_NAME]]\n};\n\nclass AngularFireModule {\n  // tslint:disable-next-line:ban-types\n  constructor(platformId) {\n    firebase.registerVersion('angularfire', VERSION.full, 'core');\n    firebase.registerVersion('angularfire', VERSION.full, 'app-compat');\n    firebase.registerVersion('angular', VERSION$1.full, platformId.toString());\n  }\n\n  static initializeApp(options, nameOrConfig) {\n    return {\n      ngModule: AngularFireModule,\n      providers: [{\n        provide: FIREBASE_OPTIONS,\n        useValue: options\n      }, {\n        provide: FIREBASE_APP_NAME,\n        useValue: nameOrConfig\n      }]\n    };\n  }\n\n}\n\nAngularFireModule.ɵfac = function AngularFireModule_Factory(t) {\n  return new (t || AngularFireModule)(i0.ɵɵinject(PLATFORM_ID));\n};\n\nAngularFireModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AngularFireModule\n});\nAngularFireModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [FIREBASE_APP_PROVIDER]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireModule, [{\n    type: NgModule,\n    args: [{\n      providers: [FIREBASE_APP_PROVIDER]\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AngularFireModule, FIREBASE_APP_NAME, FIREBASE_OPTIONS, FirebaseApp, ɵapplyMixins, ɵfirebaseAppFactory, ɵlazySDKProxy };","map":{"version":3,"sources":["C:/Users/PC/Desktop/lab/node_modules/@angular/fire/fesm2015/angular-fire-compat.js"],"names":["i0","InjectionToken","isDevMode","NgZone","Optional","VERSION","VERSION$1","PLATFORM_ID","NgModule","Inject","firebase","noopFunctions","ɵlazySDKProxy","klass","observable","zone","options","Proxy","get","_","name","runOutsideAngular","_a","spy","indexOf","promise","toPromise","then","mod","ret","bind","res","run","apply","self","args","it","ɵapplyMixins","derivedCtor","constructors","forEach","baseCtor","Object","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","FirebaseApp","constructor","app","FIREBASE_OPTIONS","FIREBASE_APP_NAME","ɵfirebaseAppFactory","nameOrConfig","config","existingApp","apps","filter","initializeApp","JSON","stringify","hmr","module","hot","log","e","level","console","FIREBASE_APP_PROVIDER","provide","useFactory","deps","AngularFireModule","platformId","registerVersion","full","toString","ngModule","providers","useValue","ɵfac","ɵmod","ɵinj","type","decorators"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, NgZone, Optional, VERSION as VERSION$1, PLATFORM_ID, NgModule, Inject } from '@angular/core';\nimport firebase from 'firebase/compat/app';\nimport { VERSION } from '@angular/fire';\n\n// DEBUG quick debugger function for inline logging that typescript doesn't complain about\n//       wrote it for debugging the ɵlazySDKProxy, commenting out for now; should consider exposing a\n//       verbose mode for AngularFire in a future release that uses something like this in multiple places\n//       usage: () => log('something') || returnValue\n// const log = (...args: any[]): false => { console.log(...args); return false }\n// The problem here are things like ngOnDestroy are missing, then triggering the service\n// rather than dig too far; I'm capturing these as I go.\nconst noopFunctions = ['ngOnDestroy'];\n// INVESTIGATE should we make the Proxy revokable and do some cleanup?\n//             right now it's fairly simple but I'm sure this will grow in complexity\nconst ɵlazySDKProxy = (klass, observable, zone, options = {}) => {\n    return new Proxy(klass, {\n        get: (_, name) => zone.runOutsideAngular(() => {\n            var _a;\n            if (klass[name]) {\n                if ((_a = options === null || options === void 0 ? void 0 : options.spy) === null || _a === void 0 ? void 0 : _a.get) {\n                    options.spy.get(name, klass[name]);\n                }\n                return klass[name];\n            }\n            if (noopFunctions.indexOf(name) > -1) {\n                return () => {\n                };\n            }\n            const promise = observable.toPromise().then(mod => {\n                const ret = mod && mod[name];\n                // TODO move to proper type guards\n                if (typeof ret === 'function') {\n                    return ret.bind(mod);\n                }\n                else if (ret && ret.then) {\n                    return ret.then((res) => zone.run(() => res));\n                }\n                else {\n                    return zone.run(() => ret);\n                }\n            });\n            // recurse the proxy\n            return new Proxy(() => { }, {\n                get: (_, name) => promise[name],\n                // TODO handle callbacks as transparently as I can\n                apply: (self, _, args) => promise.then(it => {\n                    var _a;\n                    const res = it && it(...args);\n                    if ((_a = options === null || options === void 0 ? void 0 : options.spy) === null || _a === void 0 ? void 0 : _a.apply) {\n                        options.spy.apply(name, args, res);\n                    }\n                    return res;\n                })\n            });\n        })\n    });\n};\nconst ɵapplyMixins = (derivedCtor, constructors) => {\n    constructors.forEach((baseCtor) => {\n        Object.getOwnPropertyNames(baseCtor.prototype || baseCtor).forEach((name) => {\n            Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype || baseCtor, name));\n        });\n    });\n};\n\nclass FirebaseApp {\n    constructor(app) {\n        return app;\n    }\n}\n\nconst FIREBASE_OPTIONS = new InjectionToken('angularfire2.app.options');\nconst FIREBASE_APP_NAME = new InjectionToken('angularfire2.app.name');\nfunction ɵfirebaseAppFactory(options, zone, nameOrConfig) {\n    const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';\n    const config = typeof nameOrConfig === 'object' && nameOrConfig || {};\n    config.name = config.name || name;\n    // Added any due to some inconsistency between @firebase/app and firebase types\n    const existingApp = firebase.apps.filter(app => app && app.name === config.name)[0];\n    // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any\n    // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206\n    const app = (existingApp || zone.runOutsideAngular(() => firebase.initializeApp(options, config)));\n    try {\n        if (JSON.stringify(options) !== JSON.stringify(app.options)) {\n            const hmr = !!module.hot;\n            log('error', `${app.name} Firebase App already initialized with different options${hmr ? ', you may need to reload as Firebase is not HMR aware.' : '.'}`);\n        }\n    }\n    catch (e) { }\n    return new FirebaseApp(app);\n}\nconst log = (level, ...args) => {\n    if (isDevMode() && typeof console !== 'undefined') {\n        console[level](...args);\n    }\n};\nconst FIREBASE_APP_PROVIDER = {\n    provide: FirebaseApp,\n    useFactory: ɵfirebaseAppFactory,\n    deps: [\n        FIREBASE_OPTIONS,\n        NgZone,\n        [new Optional(), FIREBASE_APP_NAME]\n    ]\n};\nclass AngularFireModule {\n    // tslint:disable-next-line:ban-types\n    constructor(platformId) {\n        firebase.registerVersion('angularfire', VERSION.full, 'core');\n        firebase.registerVersion('angularfire', VERSION.full, 'app-compat');\n        firebase.registerVersion('angular', VERSION$1.full, platformId.toString());\n    }\n    static initializeApp(options, nameOrConfig) {\n        return {\n            ngModule: AngularFireModule,\n            providers: [\n                { provide: FIREBASE_OPTIONS, useValue: options },\n                { provide: FIREBASE_APP_NAME, useValue: nameOrConfig }\n            ]\n        };\n    }\n}\nAngularFireModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireModule, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.NgModule });\nAngularFireModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireModule });\nAngularFireModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireModule, providers: [FIREBASE_APP_PROVIDER] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [FIREBASE_APP_PROVIDER]\n                }]\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireModule, FIREBASE_APP_NAME, FIREBASE_OPTIONS, FirebaseApp, ɵapplyMixins, ɵfirebaseAppFactory, ɵlazySDKProxy };\n"]},"metadata":{},"sourceType":"module"}